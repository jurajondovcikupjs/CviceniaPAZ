

    public void prestrelka(int idxPrvehoStrelca, Color farbaStriel) {

            boolean[] zasiahnuti = new boolean[this.korytnacky.length];
            int currentShooterIdx = idxPrvehoStrelca;

            while (true) {
                Turtle strelec = this.korytnacky[currentShooterIdx];

                // find nearest unhit turtle (not self)
                int idxCiela = najblizsiaKorytnacka(strelec.getX(), strelec.getY(), currentShooterIdx, zasiahnuti);
                if (idxCiela == -1) break; // no more targets

                Turtle ciel = this.korytnacky[idxCiela];

                // shoot
                strela(strelec.getX(), strelec.getY(), ciel.getX(), ciel.getY(), farbaStriel);

                // mark as hit
                zasiahnuti[idxCiela] = true;
                ciel.setPenColor(farbaStriel);

                // the hit turtle becomes the new shooter
                currentShooterIdx = idxCiela;
            }
        }

        public double casDoPrichodu(double x, double y) {
                // ak nie je ziadna korytnacka, vratime 0
                if (this.korytnacky == null || this.korytnacky.length == 0) {
                    return 0.0;
                }

                double najkratsiCas = Double.POSITIVE_INFINITY;

                // pre kazdu korytnacku vypocitame cas: minimalny uhol otocenia (v stupnoch) + vzdialenost (v pixeloch)
                for (int i = 0; i < this.korytnacky.length; i++) {
                    Turtle t = this.korytnacky[i];
                    // aktualny smer korytnacky
                    double aktualnySmer = t.getDirection();
                    // smer k cielu
                    double smerNaCiel = t.directionTowards(x, y);

                    // vypocitame minimalny uhlovy rozdiel (0..180)
                    double diff = Math.abs(smerNaCiel - aktualnySmer);
                    if (diff > 180.0) {
                        diff = 360.0 - diff;
                    }

                    double vzdialenost = t.distanceTo(x, y);
                    double cas = diff + vzdialenost; // 1 stupe≈à = 1 sekunda, 1 pixel = 1 sekunda

                    if (cas < najkratsiCas) {
                        najkratsiCas = cas;
                    }
                }